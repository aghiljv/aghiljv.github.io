__NUXT_JSONP__("/blog/Processes%20for%20Better%20Software%20Volume%203", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q){return {data:[{blog:{slug:j,name:j,titleImage:"021120\u002Ftitle",briefdesc:n,postDate:"November 01, 2020",toc:[],body:{type:"root",children:[{type:b,tag:d,props:{},children:[{type:a,value:"\n  There are many ways to write code to do something. But only when we do follow\n  certain ways, does the code remains maintainable and thus usable for a long\n  time to come.\n"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:f},{type:b,tag:i,props:{},children:[{type:a,value:"1. Limit method\u002Ffunction arguments."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  It is always a better practice to limit our arguments\u002Fparameters to 3 or less.\n  This improves the readability and in extension, maintainability. If it is\n  crossing a number, then it is time to refactor the code. As an example, if we\n  can accommodate multiple arguments into an object, in a meaningful way, then\n  we can effectively decrease the number of arguments passed, while still\n  retaining the same result.\n"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:f},{type:b,tag:i,props:{},children:[{type:a,value:"2. Simplify conditional expressions."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  We all need to use conditional expressions in our codes. The trick is\n  simplifying it in a way that it remains readable. The following two methods\n  takes in same argument and gives same output, only the function on the second\n  one does it in a much simpler way.\n"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Method 1:"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[]},{type:a,value:c},{type:b,tag:l,props:{style:m},children:[{type:a,value:f},{type:b,tag:d,props:{style:g},children:[{type:a,value:o}]},{type:a,value:f},{type:b,tag:d,props:{style:h},children:[{type:a,value:"if (person.age \u003E= 18) {"}]},{type:a,value:f},{type:b,tag:d,props:{style:p},children:[{type:a,value:"return true;"}]},{type:a,value:f},{type:b,tag:d,props:{style:h},children:[{type:a,value:"} else {"}]},{type:a,value:f},{type:b,tag:d,props:{style:p},children:[{type:a,value:"return false;"}]},{type:a,value:f},{type:b,tag:d,props:{style:h},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:d,props:{style:g},children:[{type:a,value:k}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Method 2:"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[]},{type:a,value:c},{type:b,tag:l,props:{style:m},children:[{type:a,value:f},{type:b,tag:d,props:{style:g},children:[{type:a,value:o}]},{type:a,value:f},{type:b,tag:d,props:{style:h},children:[{type:a,value:"return person.age \u003E=18;"}]},{type:a,value:f},{type:b,tag:d,props:{style:g},children:[{type:a,value:k}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:f},{type:b,tag:i,props:{},children:[{type:a,value:"3. Declare variables near to their usage."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Some of us (including myself), usually have a tendency to declare all the\n  variables at one place. Usually at the top. Even if the variables are\n  following good naming conventions such that one look will give you the idea\n  what it is used for, it is still a better way and a good practice to declare\n  it near to where it is being used. One adverse effect of declaring all\n  variables in one place is we might scroll up and down a lot while trying to\n  understand the variable and it is highly likely to get distracted during that\n  process. We might be in the middle of creating a feature or fixing a bug and\n  it is always better to finish the job at hand before jumping into another.\n"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:f},{type:b,tag:i,props:{},children:[{type:a,value:"4. Avoid unintended consequences in your function."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  If you are creating a function with a name associated with its job, then that\n  particular function should do just that. Nothing more, nothing less. Again, in\n  the long run this makes the code more maintainable. For example,\n"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[]},{type:a,value:c},{type:b,tag:l,props:{style:m},children:[{type:a,value:f},{type:b,tag:d,props:{style:g},children:[{type:a,value:"function addNumbers(numberOne, numberTwo){"}]},{type:a,value:f},{type:b,tag:d,props:{style:h},children:[{type:a,value:"emailService.send(“Addition is done.”);"}]},{type:a,value:f},{type:b,tag:d,props:{style:h},children:[{type:a,value:"return numberOne + numberTwo;"}]},{type:a,value:f},{type:b,tag:d,props:{style:g},children:[{type:a,value:k}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Usually, there is no need for the line “emailService.send(“Addition is\n  done.”);” inside this function. Either change the name of the function\n  accordingly or just remove the line to make a more sensible, readable and\n  maintainable function.\n"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:f},{type:b,tag:i,props:{},children:[{type:a,value:"5. Avoid zombie code."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  This is simply dead code but with a chance to come alive. In layman’s terms,\n  zombie code is usually commented code, kept by engineers, who cannot decide\n  whether it should be deleted or not because there might be a slight chance\n  that they might have to use it at some point in the future. This again will\n  most probably distract any other engineer who comes into maintain the code.\n  They will not be sure whether to keep it not, mainly because they do not know\n  why it was created in the first place and will spend a lot of time on the\n  same. One thing for sure is we must never put this inside a production code.\n"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Disclaimer : The views and opinions expressed in the article belong solely to the\n  author, and not necessarily to the author's employer, organisation, committee\n  or other group or individual.\n"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[]},{type:b,tag:e,props:{},children:[]},{type:b,tag:e,props:{},children:[]}]},dir:"\u002Fblogs",path:"\u002Fblogs\u002FProcesses for Better Software Volume 3",extension:".md",createdAt:q,updatedAt:q},title:j,description:n,ogImage:"\u002Fimg\u002Fblog\u002F021120\u002Ftitle.jpg",params:{slug:j}}],fetch:{},mutations:[["pageTitle\u002Fset","BLOG"]]}}("text","element","\n","p","br","\n  ","padding-left: 5%","padding-left: 10%","b","Processes for Better Software Volume 3","}","div","\n    width: 100%;\n    background: var(--background-color-primary-code);\n    padding: 5%;\n    border-radius: 0.25em;\n  ","Best practices for software engineers.","function isPersonAdult(person) {","padding-left: 15%","2022-03-06T07:59:46.472Z")));