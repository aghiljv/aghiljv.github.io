__NUXT_JSONP__("/blog/Physics%20Engine", (function(a,b,c,d,e,f,g,h,i){return {data:[{blog:{slug:f,name:f,titleImage:"150221\u002Ftitle",briefdesc:h,postDate:"February 12, 2021",blogNumber:46,toc:[{depth:2,text:i}],body:{type:"root",children:[{type:b,tag:e,props:{},children:[{type:a,value:"\n  A physics engine describes a software program that is used to simulate\n  physical phenomena. The first physics engines were used in military\n  simulations, predicting where artillery shells would land. These engines\n  factored in the shells' weights, forces and trajectories to simulate the\n  result. Since then, they have also been employed in the design of aircraft,\n  watercraft and land vehicles.\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"\n  There are generally two types of physics engines.\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[]},{type:b,tag:g,props:{},children:[{type:a,value:"High-precision physics engines"}]},{type:b,tag:d,props:{},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"\n  High-precision physics engines require more processing power to calculate very\n  precise physics and are usually used by scientists and computer animated\n  movies.\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[]},{type:b,tag:g,props:{},children:[{type:a,value:"Real-time physics engines"}]},{type:b,tag:d,props:{},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"\n  Real-time physics engines are used in video games and other forms of\n  interactive computing. They use simplified calculations and decreased accuracy\n  to compute in time for the game to respond at an appropriate rate for game\n  play.\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"\n  In most computer games, speed of the processors and gameplay are more\n  important than accuracy of simulation. This leads to designs for physics\n  engines that produce results in real-time but that replicate real world\n  physics only for simple cases and typically with some approximation. More\n  often than not, the simulation is geared towards providing a \"perceptually\n  correct\" approximation rather than a real simulation.\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"\n  Physically-based character animation in the past only used rigid body dynamics\n  because they are faster and easier to calculate, but modern games and movies\n  are starting to use soft body physics. Soft body physics are also used for\n  particle effects, liquids and cloth. Some form of limited fluid dynamics\n  simulation is sometimes provided to simulate water and other liquids as well\n  as the flow of fire and explosions through the air.\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"\n  Some applications of game physics engine are the following.\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[]},{type:b,tag:g,props:{},children:[{type:a,value:"Collision detection"}]},{type:b,tag:d,props:{},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"\n  Most objects in games are represented by two separate meshes or shapes. One of\n  these meshes is the highly complex and detailed shape visible to the player in\n  the game, such as a vase. For purpose of speed, a second, simplified invisible\n  mesh is used to represent the object to the physics engine so that the physics\n  engine treats the example vase as a simple cylinder. The simplified mesh used\n  for physics processing is often referred to as the collision geometry. This\n  may be a bounding box, sphere or convex hull. Engines that use bounding boxes\n  or bounding spheres as the final shape for collision detection are considered\n  extremely simple.\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[]},{type:b,tag:g,props:{},children:[{type:a,value:"Brownian motion"}]},{type:b,tag:d,props:{},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"\n  In the real world, there is a constant Brownian motion jitter to all particles\n  in our universe as the forces push back and forth against each other. For a\n  game physics engine, such constant active precision is unnecessarily wasting\n  the limited CPU power, which can cause problems such as decreased framerate.\n  Thus, games may put objects to \"sleep\" by disabling the computation of physics\n  on objects that have not moved a particular distance within a certain amount\n  of time. The object will remain frozen until physics processing reactivates\n  for the object after collision occurs with some other active physical object.\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:c}]},{type:b,tag:"h2",props:{},children:[{type:a,value:i}]},{type:a,value:c},{type:b,tag:e,props:{},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"\n  Disclaimer : The views and opinions expressed in the article belong solely to\n  the author, and not necessarily to the author's employer, organisation,\n  committee or other group or individual.\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[]},{type:b,tag:d,props:{},children:[]},{type:b,tag:d,props:{},children:[]}]},dir:"\u002Fblogs",path:"\u002Fblogs\u002FPhysics Engine",extension:".md",createdAt:"2022-03-06T07:59:46.470Z",updatedAt:"2022-03-06T09:12:14.481Z"},title:f,description:h,ogImage:"\u002Fimg\u002Fblog\u002F150221\u002Ftitle.jpg",params:{slug:f}}],fetch:{},mutations:[["pageTitle\u002Fset","BLOG"]]}}("text","element","\n","br","p","Physics Engine","b","How do physics engines help create a better experience for games and simulations.","Game physics engines enhance the player's enjoyment by simulating the\n  complex physical characteristics of a virtual world while scientific physics\n  engines use an approximation of real-world physics to quickly simulate complex\n  world interactions.\n")));